class MyDoomGuy : DoomPlayer {
  Default
  {
    +THRUSPECIES
    
    Species "Companion";
    DamageFactor "Companion", 0.0;

    Player.StartItem "MyFist";
		Player.StartItem "MyPistol";
    Player.StartItem "CompanionZombieManAmmo", 7;
    Player.StartItem "CompanionZombieManGun", 1;
    Player.StartItem "ChainsawZombieAmmo", 3;
    Player.StartItem "ChainsawZombieGun", 1;
    Player.WeaponSlot 1, "MyFist";
		Player.WeaponSlot 2, "MyPistol";
    
  }
  
  override void PostBeginPlay(){
    super.PostBeginPlay();
    player.cheats |= CF_INSTANTWEAPSWITCH;
  }

  override Weapon PickNextWeapon(){
    let player = self.player;
		bool found;
		int startslot, startindex;
		int slotschecked = 0;

		[found, startslot, startindex] = FindMostRecentWeapon();
		let ReadyWeapon = player.ReadyWeapon;
		if (ReadyWeapon == null || found)
		{
			int slot;
			int index;

			if (ReadyWeapon == null)
			{
				startslot = NUM_WEAPON_SLOTS - 1;
				startindex = player.weapons.SlotSize(startslot) - 1;
			}

			slot = startslot;
			index = startindex;
			do
			{
				if (++index >= player.weapons.SlotSize(slot))
				{
					index = 0;
					slotschecked++;
					if (++slot >= NUM_WEAPON_SLOTS)
					{
						slot = 0;
					}
				}
				let type = player.weapons.GetWeapon(slot, index);
				let weap = Weapon(FindInventory(type));
				if (weap != null){
          if(weap is "BaseDeployer" && player.mo.CountInv(weap.AmmoType2) == 0){
            weap.OnDestroy();
            continue;
          }else if(weap.CheckAmmo(Weapon.EitherFire, false)){
            return weap;
          }
        }
			} while ((slot != startslot || index != startindex) && slotschecked <= NUM_WEAPON_SLOTS);
		}
		return ReadyWeapon;
  }

  override Weapon PickPrevWeapon(){
    let player = self.player;
		int startslot, startindex;
		bool found;
		int slotschecked = 0;

		[found, startslot, startindex] = FindMostRecentWeapon();
		if (player.ReadyWeapon == null || found)
		{
			int slot;
			int index;

			if (player.ReadyWeapon == null)
			{
				startslot = 0;
				startindex = 0;
			}

			slot = startslot;
			index = startindex;
			do
			{
				if (--index < 0)
				{
					slotschecked++;
					if (--slot < 0)
					{
						slot = NUM_WEAPON_SLOTS - 1;
					}
					index = player.weapons.SlotSize(slot) - 1;
				}
				let type = player.weapons.GetWeapon(slot, index);
				let weap = Weapon(FindInventory(type));
				if (weap != null){
          if(weap is "BaseDeployer" && player.mo.CountInv(weap.AmmoType2) == 0){
            weap.OnDestroy();
            continue;
          }else if(weap.CheckAmmo(Weapon.EitherFire, false)){
            return weap;
          }
        }
			} while ((slot != startslot || index != startindex) && slotschecked <= NUM_WEAPON_SLOTS);
		}
		return player.ReadyWeapon;
  }

  /*override void Tick(){
    super.Tick();
    cVar scaleWithLevels = cVar.GetCVar('zdw_debugspawning');
    if(scaleWithLevels.GetBool())
    {
      Globals g = Globals(EventHandler.Find("Globals"));
      String companionClass = g.getRandomCompanion();
      Actor.Spawn(companionClass.."Gun", pos);
    }
  }*/
}


class MyFist : Fist replaces Fist
{
	BioProjAlt altproj;
	Default
	{
    +WEAPON.NOALERT
	}
	States
	{
		AltFire:
			PUNG B 4;
			PUNG C 4
			{
				invoker.ammouse2 = 0;
        invoker.altproj = BioProjAlt(A_FireProjectile("BioProjAlt"));
			}
		AltHold:
			PUNG D 5;
			PUNG D 5 A_Refire("AltHold");
			PUNG C 4;
			PUNG B 5;
      TNT1 A 0
      {
        if(invoker.altproj){
          invoker.altproj.A_Die();
        }
      }
      GoTo Ready;
		Fire:
			PUNG B 4;
			PUNG C 4 A_CustomPunch(20 * random(1, 10), TRUE);
			PUNG D 5;
			PUNG C 4;
			PUNG B 5 A_ReFire;
			Goto Ready;
	}
}

class MyPistol : Pistol replaces Pistol
{
	Default
	{
		Weapon.AmmoUse 0;
		+WEAPON.NOALERT;
	}
	States
	{
	Fire:
		PISG A 4;
		PISG B 6 A_CompanionFirePistol;
		PISG C 4;
		PISG B 5 A_ReFire;
		Goto Ready;
	}

	action void A_CompanionFirePistol()
	{
		bool accurate;

		if (player != null)
		{
			Weapon weap = player.ReadyWeapon;
			if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
			{
				if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
					return;

				player.SetPsprite(PSP_FLASH, weap.FindState('Flash'), true);
			}
			player.mo.PlayAttacking2 ();

			accurate = !player.refire;
		}
		else
		{
			accurate = true;
		}

		A_StartSound ("weapons/pistol", CHAN_WEAPON);
		GunShot (accurate, "CompanionBulletPuff", BulletSlope ());
	}

	protected action void GunShot(bool accurate, Class<Actor> pufftype, double pitch)
	{
		//int damage = 5 * random[GunShot](1, 3);
		int damage = 0;
		double ang = angle;

		if (!accurate)
		{
			ang += Random2[GunShot]() * (5.625 / 256);
		}

		LineAttack(ang, PLAYERMISSILERANGE, pitch, damage, 'Companion', 'CompanionBulletPuff');
	}
}

class VersionPrinter : EventHandler
{
  override void PlayerEntered(PlayerEvent e){
		PlayerInfo player = players[e.PlayerNumber];
		console.printf(player.GetUserName().." "..Ver.Get());
		console.midprint("BIGFONT", "\cg"..Ver.Get(), false);
	}
}