Class CheshireCacodemon : Actor
{
  Default
  {
    +FRIENDLY
    Species "Companion";
    DamageFactor "Companion", 0;
    Health 800;
    Radius 31;
    Height 56;
    Mass 400;
    Speed 8;
    PainChance 64;
    Monster;
    +FLOAT
    +NOGRAVITY
    +DONTRIP
    +NOTIMEFREEZE
    +NOICEDEATH
    +DONTMORPH
    +DONTFALL
    +Ghost
    renderstyle "Translucent";
    alpha 0.6;
    Bloodcolor "56 00 91";
    SeeSound "ches/see";
    PainSound "caco/pain";
    DeathSound "caco/death";
    ActiveSound "ches/act";
    Obituary "you're in wonderland now buddy!";

    MeleeRange 128;
  }
  States
  {
    Spawn:
      SHSR A 10 A_Look;
      Loop;
    See:
      TNT1 A 0 A_JumpIfInventory("SeeCheck",5,"SeeCheck");
      //TNT1 A 0 A_Print("Welcome to Wonderland");
      TNT1 A 0 A_GiveInventory("SeeCheck",1);
      Goto SeeCheck;
    SeeCheck:
      TNT1 A 0 A_JumpIfInventory("Dissipate",5,"Fade");
      TNT1 A 0 A_JumpIfInventory("CheshireI",1,"ChesSee");
      TNT1 A 0 A_JumpIfCloser(128,"Flame");
      TNT1 A 0 A_Jump(32,"Scoot");
      SHSR AA 3 A_Chase;
      Loop;
    Scoot:
      TNT1 A 0 A_Jump(16,"Slow");
      SHSR A 4 A_FastChase;
      TNT1 A 0 A_SpawnItemEX("Blur");
      SHSR A 4 A_FastChase;
      TNT1 A 0 A_SpawnItemEX("Blur");
      SHSR A 4 A_FastChase;
      TNT1 A 0 A_SpawnItemEX("Blur");
      SHSR A 4 A_FastChase;
      TNT1 A 0 A_SpawnItemEX("Blur");
      SHSR A 4 A_FastChase;
      TNT1 A 0 A_SpawnItemEX("Blur");
      Goto See;
    Slow:
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      TNT1 A 0 A_SpawnItemEX("Blur");
      SHSR A 3 A_Chase;
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      TNT1 A 0 A_SpawnItemEX("Blur");
      SHSR A 3 A_Chase;
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      TNT1 A 0 A_SpawnItemEX("Blur");
      SHSR A 3 A_Chase;
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      TNT1 A 0 A_SpawnItemEX("Blur");
      SHSR A 3 A_Chase;
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      TNT1 A 0 A_SpawnItemEX("Blur");
      SHSR A 3 A_Chase;
      Goto See;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      TNT1 A 0 A_JumpIfInventory("Dissipate",5,"Fade");
      TNT1 A 0 A_JumpIfInventory("CheshireI",1,"ChesMissile");
      TNT1 A 0 A_JumpIfCloser(128,"Flame");
      TNT1 A 0 A_Jump(32, "Missile2","Fake","Teleport");
      SHSR B 5 A_FaceTarget;
      SHSR C 5 A_FaceTarget;
      TNT1 A 0 A_SpawnItem("Ring",0,0,56);
      SHSR D 5 BRIGHT A_SpawnProjectile("ChesBallA");
      Goto See;
    Missile2:
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      SHSR B 5 A_FaceTarget;
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      SHSR C 5 A_FaceTarget;
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      TNT1 A 0 A_SpawnItem("Ring",0,0,56);
      SHSR D 5 BRIGHT A_SpawnProjectile("ChesBallA");
      Goto See;
    Fake:
      SHSR B 5 A_FaceTarget;
      SHSR C 5 A_FaceTarget;
      SHSR DD 3 BRIGHT A_CompanionPainAttack("FakeWait");
      Goto See;
    Melee:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      TNT1 A 0 A_JumpIfCloser(128,"FlameClose");
      SHSR B 5 A_FaceTarget;
      SHSR C 5 A_FaceTarget;
      SHSR DDDDD 1 BRIGHT A_SpawnProjectile("ChshireFlame");
      Goto See;
    FlameClose:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      SHSR DDDDD 1 BRIGHT A_SpawnProjectile("ChshireFlame");
      TNT1 A 0 A_Look();
      TNT1 A 0 A_JumpIfCloser(128,"FlameClose");
      Goto See;
    Pain:
      TNT1 A 0 A_GiveInventory("Dissipate",1);
      TNT1 A 0 A_Jump(16, 4);
      SHSR E 6 A_Pain;
      SHSR F 6;
      Goto See;
      TNT1 A 0 A_GiveInventory("ChesFreeze",1);
      SHSR A 0 A_PainAttack("ChesFake");
      SHSR E 3;
      SHSR E 3 A_Pain;
      SHSR F 6;
      Goto See;
    Teleport:
      SHSR E 0 A_SetInvulnerable;
      SHSR E 1 A_SetTranslucent(0.90);
      SHSR E 1 A_SetTranslucent(0.80);
      SHSR E 1 A_SetTranslucent(0.70);
      SHSR E 1 A_SetTranslucent(0.60);
      SHSR F 1 A_SetTranslucent(0.50);
      SHSR F 1 A_SetTranslucent(0.40);
      SHSR F 1 A_SetTranslucent(0.30);
      SHSR F 1 A_SetTranslucent(0.20);
      SHSR F 1 A_SetTranslucent(0.10);
      SHSR F 0 A_Jump(128,25);
      TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_Chase(null,null);
      TNT1 A 0 A_Jump(128,25);
      TNT1 A 0 A_SpawnItemEX("FakeWait");
      TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_Chase(null,null);
      SHSR F 1 A_SetTranslucent(0.10);
      SHSR F 1 A_SetTranslucent(0.20);
      SHSR F 1 A_SetTranslucent(0.30);
      SHSR F 1 A_SetTranslucent(0.40);
      SHSR F 1 A_SetTranslucent(0.50);
      SHSR F 1 A_SetTranslucent(0.60);
      SHSR F 1 A_SetTranslucent(0.70);
      SHSR F 1 A_SetTranslucent(0.80);
      SHSR F 1 A_SetTranslucent(0.90);
      SHSR F 1 A_SetTranslucent(1.0);
      SHSR F 0 A_UnSetInvulnerable;
      goto See;
    Death:
      SHSR F 1 A_Scream;
      WARP A 3 A_SpawnItemEX("FakeWait");
      WARP BCD 3 A_Fadeout(0.01);
      WARP EFG 3 A_Fadeout;
      Stop;
    Fade:
      TNT1 A 0 A_TakeInventory("Dissipate",20);
      TNT1 A 0 A_GiveInventory("CheshireI",1);
      TNT1 A 0 A_SetReflectiveInvulnerable;
      SHSR A 1 A_SetTranslucent(0.60);
      SHSR A 1 A_SetTranslucent(0.50);
      SHSR A 1 A_SetTranslucent(0.40);
      SHSR A 1 A_SetTranslucent(0.30);
      SHSR A 1 A_SetTranslucent(0.20);
      SHSR A 1 A_SetTranslucent(0.10);
      TNT1 AAAAAAAA 1 A_Chase(null,null);
      TNT1 A 0 A_GiveInventory("ChesDeepFreeze",1);
      SLPS A 1 A_SetTranslucent(0.10);
      SLPS A 1 A_SetTranslucent(0.20);
      SLPS A 1 A_SetTranslucent(0.30);
      SLPS A 1 A_SetTranslucent(0.40);
      SLPS A 1 A_SetTranslucent(0.50);
      SLPS A 1 A_SetTranslucent(0.60);
      Goto ChesSee;
    ChesSee:
      TNT1 A 0 A_Jump(8, "ChesScoot","ChesSlow");
      SLPS AA 3 A_Chase;
      Loop;
    ChesScoot:
      SLPS A 4 A_FastChase;
      TNT1 A 0 A_SpawnItemEX("Blur2");
      SLPS A 4 A_FastChase;
      TNT1 A 0 A_SpawnItemEX("Blur2");
      SLPS A 4 A_FastChase;
      TNT1 A 0 A_SpawnItemEX("Blur2");
      SLPS A 4 A_FastChase;
      TNT1 A 0 A_SpawnItemEX("Blur2");
      SLPS A 4 A_FastChase;
      TNT1 A 0 A_SpawnItemEX("Blur2");
      Goto ChesSee;
    ChesSlow:
      SLPS A 4 A_Chase;
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      TNT1 A 0 A_SpawnItemEX("Blur2");
      SLPS A 4 A_Chase;
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      TNT1 A 0 A_SpawnItemEX("Blur2");
      SLPS A 4 A_Chase;
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      TNT1 A 0 A_SpawnItemEX("Blur2");
      SLPS A 4 A_Chase;
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      TNT1 A 0 A_SpawnItemEX("Blur2");
      SLPS A 4 A_Chase;
      TNT1 A 0 A_GiveInventory("ChesSlow",1);
      TNT1 A 0 A_SpawnItemEX("Blur2");
      Goto ChesSee;
    ChesMissile:
      TNT1 A 0 A_JumpIfInventory("CheshireUnmake",5,"UnFade");
      TNT1 A 0 A_GiveInventory("CheshireUnmake",1);
      SLPS B 5 A_FaceTarget;
      SLPS C 5 A_FaceTarget;
      TNT1 A 0 A_SpawnItem("Ring",0,0,56);
      SLPS D 5 BRIGHT A_SpawnProjectile("ChesBallA");
      Goto ChesSee;
    UnFade:
      TNT1 A 0 A_TakeInventory("CheshireUnmake",20);
      TNT1 A 0 A_TakeInventory("CheshireI",1);
      SLPS A 1 A_SetTranslucent(0.60);
      SLPS A 1 A_SetTranslucent(0.50);
      SLPS A 1 A_SetTranslucent(0.40);
      SLPS A 1 A_SetTranslucent(0.30);
      SLPS A 1 A_SetTranslucent(0.20);
      SLPS A 1 A_SetTranslucent(0.10);
      TNT1 AAAAAAAA 1 A_Chase(null,null);
      SHSR A 1 A_SetTranslucent(0.10);
      SHSR A 1 A_SetTranslucent(0.20);
      SHSR A 1 A_SetTranslucent(0.30);
      SHSR A 1 A_SetTranslucent(0.40);
      SHSR A 1 A_SetTranslucent(0.50);
      SHSR A 1 A_SetTranslucent(0.60);
      TNT1 A 0 A_UnSetReflectiveInvulnerable;
      Goto See;
  }

  void A_CompanionPainAttack(class<Actor> spawntype = "FakeWait", double addangle = 0, int flags = 0, int limit = -1)
	{
		if (target)
		{
			A_FaceTarget();
			A_CompanionPainShootSkull(spawntype, angle + addangle, flags, limit);
		}
	}

  void A_CompanionPainShootSkull(Class<Actor> spawntype, double angle, int flags = 0, int limit = -1)
	{
		if (DamageType == "Massacre") return;

		if (spawntype == null) spawntype = "FakeWait";

		if (pos.z + height + 8 > ceilingz)
		{
			if (bFloat)
			{
				Vel.Z -= 2;
				bInFloat = true;
				bVFriction = true;
			}
			return;
		}

		if (limit < 0 && (Level.compatflags & COMPATF_LIMITPAIN))
			limit = 21;

		if (limit > 0)
		{
			int count = limit;
			ThinkerIterator it = ThinkerIterator.Create(spawntype);
			Thinker othink;

			while ( (othink = it.Next ()) )
			{
				if (--count == 0)
					return;
			}
		}

		double otherradius = GetDefaultByType(spawntype).radius;
		double prestep = 4 + (radius + otherradius) * 1.5;

		Vector2 move = AngleToVector(angle, prestep);
		Vector3 spawnpos = pos + (0,0,8);
		Vector3 destpos = spawnpos + move;

		//Actor other = Spawn(spawntype, spawnpos, ALLOW_REPLACE);
    let g = Globals(EventHandler.Find("Globals"));
    Actor other = g.createCompanion("FakeWait", pos, null, "", true);

		if (other != null)
		{
			double maxmove = other.radius - 1;

			if (maxmove <= 0) maxmove = 16;

			double xspeed = abs(move.X);
			double yspeed = abs(move.Y);

			int steps = 1;

			if (xspeed > yspeed)
			{
				if (xspeed > maxmove)
				{
					steps = int(1 + xspeed / maxmove);
				}
			}
			else
			{
				if (yspeed > maxmove)
				{
					steps = int(1 + yspeed / maxmove);
				}
			}

			Vector2 stepmove = move / steps;
			bool savedsolid = bSolid;
			bool savednoteleport = other.bNoTeleport;

			bSolid = false;
			other.bNoTeleport = true;
			for (int i = 0; i < steps; i++)
			{
				Vector2 ptry = other.pos.xy + stepmove;
				double oldangle = other.angle;
				if (!other.TryMove(ptry, 0))
				{
					other.ClearCounters();
					other.DamageMobj(self, self, TELEFRAG_DAMAGE, "Companion");
					bSolid = savedsolid;
					other.bNoTeleport = savednoteleport;
					return;
				}

				if (other.pos.xy != ptry)
				{
					double anglediff = deltaangle(oldangle, other.angle);

					if (anglediff != 0)
					{
						stepmove = RotateVector(stepmove, anglediff);
					}
				}

			}
			bSolid = savedsolid;
			other.bNoTeleport = savednoteleport;

			other.CopyFriendliness (self, !(flags & PAF_NOTARGET));

			if (!(flags & PAF_NOSKULLATTACK))
			{
				other.A_SkullAttack();
			}
		}
	}
}

Class ChshireFlame : Actor
{
  Default
  {
    Species "Companion";
    DamageType "Companion";
    Radius 4;
    Height 6;
    Speed 28;
    Damage 1;
    PROJECTILE;
    +STRIFEDAMAGE
    +NOTIMEFREEZE
    +BLOODLESSIMPACT
    +RIPPER
    RENDERSTYLE "ADD";
    ALPHA 0.8;
    SeeSound "ChesFlame";
  }
  States
  {
    Spawn:
      CHFR ABCDEFGHIJKLMOP 1 Bright;
      Stop;
    Death:
      CHFR HIJKLMOP 1 Bright;
      Stop;
  }
}

Class ChesBallA : Actor
{
  Default
  {
    Species "Companion";
    DamageType "Companion";
    Radius 6;
    Height 8;
    Speed 15;
    FastSpeed 10;
    Damage 5;
    Projectile;
    +RANDOMIZE
    +RIPPER
    +NOTIMEFREEZE
    RenderStyle "Add";
    Alpha 1;
    SeeSound "ChesFire";
    DeathSound "ChesHit";
    Decal "ChesScorch";
  }
  States
  {
    Spawn:
      TNT1 AA 0 A_SpawnItemEx("Sparky",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
      SHST A 2 BRIGHT;
      TNT1 AA 0 A_SpawnItemEx("Sparky",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
      SHST B 2 BRIGHT;
      TNT1 AA 0 A_SpawnItemEx("Sparky",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
      SHST C 2 BRIGHT;
      Loop;
    Death:
      TNT1 AA 0 A_SpawnItemEx("Sparky",0,0,0,random(-6,6),random(-6,6),random(-6,6),random(1,360));
      SHST G 3 BRIGHT;
      TNT1 AA 0 A_SpawnItemEx("Sparky",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
      SHST H 3 BRIGHT;
      TNT1 AA 0 A_SpawnItemEx("Sparky",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
      SHST I 3 BRIGHT;
      TNT1 AA 0 A_SpawnItemEx("Sparky",0,0,0,random(-3,3),random(-3,3),random(-3,3),random(1,360));
      SHST J 3 BRIGHT;
      TNT1 AA 0 A_SpawnItemEx("Sparky",0,0,0,random(-2,2),random(-2,2),random(-2,2),random(1,360));
      SHST K 3 BRIGHT;
      TNT1 AA 0 A_SpawnItemEx("Sparky",0,0,0,random(-1,1),random(-1,1),random(-1,1),random(1,360));
      SHST L 3 BRIGHT;
      Stop;
  }
}

Class CBT : Actor
{
  Default
  {
    +NOCLIP
    +NOINTERACTION
    +NOGRAVITY
    renderstyle "ADD";
    alpha 0.3;
    scale 1.1;
  }
  States
  {
    Spawn:
      TNT1 A 2;
      OBTT ABCDEF 2 BRIGHT;
      OBTT GHIJ 1 BRIGHT A_fadeout;
      Stop;
  }
}

Class Sparky : Actor
{
  Default
  {
    +NOCLIP
    +NOGRAVITY
    +NOINTERACTION
    +NOTIMEFREEZE
    renderstyle "ADD";
    alpha 0.9;
  }
  states
  {
    Spawn:
      TNT1 A 2;
      FALL ABCDEFG 1;
    Fade:
      FALL HIJKLMNOPABCDEFG 1 BRIGHT A_Fadeout;
      Loop;
  }
}

Class Ring : Actor
{
  Default
  {
    +NOCLIP
    +NOGRAVITY
    +NOINTERACTION
    +NOTIMEFREEZE
    renderstyle "ADD";
    alpha 0.5;
  }
  states
  {
    Spawn:
      BLST ABCDEFGHI 2  BRIGHT;
      BLST JKLMNOP 2 BRIGHT A_Fadeout;
      Stop;
  }
}

Class ChesFake : Actor
{
  Default
  {
    +FRIENDLY
    Species "Companion";
    DamageFactor "Companion", 0;
    Health 50;
    Radius 31;
    Height 56;
    Mass 9999999;
    Speed 4;
    Monster;
    +FLOAT
    +NOGRAVITY
    +DONTRIP
    +NOTIMEFREEZE
    +NOICEDEATH
    +DONTMORPH
    +LOOKALLAROUND
    +DONTFALL
    +MISSILEMORE
    +Ghost
    -COUNTKILL
    -SOLID
    renderstyle "Translucent";
    alpha 0.6;
    Bloodcolor "56 00 91";
    SeeSound "ches/see";
    DeathSound "caco/death";
    Obituary "you're in wonderland now buddy!";
  }
  States
  {
    Spawn:
      SHSR A 10 A_Look;
      Loop;
    See:
      SHSR A 10 A_Stop;
      TNT1 A 0 A_FaceTarget;
      SHSR A 3 A_Chase;
      Goto See+1;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      SHSR B 5 A_FaceTarget;
      SHSR C 5 A_FaceTarget;
      TNT1 A 0 A_SpawnItem("Ring",0,0,56);
      SHSR D 5 BRIGHT A_SpawnProjectile("ChesBall2");
      Goto See+1;
    Death:
      TNT1 A 0 A_Jump(8,"More");
      SHSR F 1 A_Scream;
      WARP A 3;
      WARP BCD 3 A_Fadeout(0.01);
      WARP EFG 3 A_Fadeout;
      Stop;
    More:
      SHSR F 1 A_Scream;
      WARP A 3 A_SpawnItemEX("FakeWait");
      WARP BCD 3 A_Fadeout(0.01);
      WARP EFG 3 A_Fadeout;
      Stop;
  }
}

Class FakeWait : Actor
{
  Default
  {
    Radius 31;
    Height 56;
    +NOGRAVITY
    +NOINTERACTION
    +NOTIMEFREEZE
    renderstyle "NONE";
    Speed 16;
  }
  states
  {
    Spawn:
      TNT1 AAAAAAAAAAAAAAAA 1 A_Wander;
      TNT1 A 1
      {
        //A_SpawnItemEX("ChesFake",0,0,0,0,0,0,0,48);
        let g = Globals(EventHandler.Find("Globals"));
        g.createCompanion("ChesFake", pos);
      }
      TNT1 AAAAAAAAAAAAAAAA 1 A_Wander;
      TNT1 A 1
      {
        //A_SpawnItemEX("ChesFake",0,0,0,0,0,0,0,48);
        let g = Globals(EventHandler.Find("Globals"));
        g.createCompanion("ChesFake", pos);
      }
      TNT1 AAAAAAAAAAAAAAAA 1 A_Wander;
      TNT1 A 1
      {
        //A_SpawnItemEX("ChesFake",0,0,0,0,0,0,0,48);
        let g = Globals(EventHandler.Find("Globals"));
        g.createCompanion("ChesFake", pos);
      }
      Stop;
  }
}

Class ChesBall2 : ChesBallA
{
  Default
  {
    Species "Companion";
    DamageType "Companion";
    Damage 1;
    -RIPPER
    +BLOODLESSIMPACT
  }
}

Class Blur : Actor
{
  Default
  {
    +NOCLIP
    +NOGRAVITY
    +NOINTERACTION
    +NOTIMEFREEZE
    renderstyle "Translucent";
    alpha 0.5;
  }
  states
  {
    Spawn:
      SHSR A 2 A_Fadeout;
      Loop;
  }
}

Class Blur2 : Blur
{
  states
  {
    Spawn:
      SLPS A 2 A_Fadeout;
      Loop;
  }
}

Class Dissipate : Inventory
{
  Default
  {
    Inventory.MaxAmount 5;
  }
}

Class CheshireI : Inventory
{
  Default
  {
    Inventory.MaxAmount 1;
  }
}

Class CheshireUnMake : Inventory
{
  Default
  {
    Inventory.MaxAmount 10;
  }
}

Class SeeCheck : Inventory
{
  Default
  {
    Inventory.MaxAmount 10;
  }
}

Class ChesFreeze : PowerupGiver
{
  Default
  {
    inventory.maxamount 0;
    powerup.type "PowerTimeFreezer";
    powerup.duration 10;
    +INVENTORY.AUTOACTIVATE
    inventory.pickupmessage "fuck";
  }
  states
  {
    Spawn:
      TNT1 A 0
      {
        console.printf("owner: "..owner.getclassname());
      }
      stop;
  }
}

Class ChesDeepFreeze : ChesFreeze
{
  Default
  {
    powerup.duration 15;
  }
}

Class ChesSlow : ChesFreeze
{
  Default
  {
    powerup.duration -2;
  }
}
