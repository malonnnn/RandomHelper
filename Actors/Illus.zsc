Class Illus : Actor
{
  Default
  {
    +FRIENDLY
    Species "Companion";
    DamageFactor "Companion", 0;
    Health 120;
    Radius 20;
    Height 56;
    Mass 250;
    Speed 10;
    BloodColor "00 00 01";
    Monster;
    RenderStyle "Translucent";
    Alpha 0.8;
    MaxTargetRange 512;
    +FloorClip
    SeeSound "Illus/Sight";
    DeathSound "Illus/Death";
    ActiveSound "Illus/Active";
    MeleeSound "Illus/Melee";
    Obituary "%o was clawed inside by an illus";
  }
  States
  {
    Spawn:
      ILLS AAAAAAAAAABBBBBBBBBB 1 Bright A_Look;
      Loop;
    See:
      ILLS A 3 Bright A_Chase;
      ILLS A 0 Bright A_SpawnItemEx("IllusImageA");
      ILLS A 3 Bright A_Chase;
      ILLS A 0 Bright A_SpawnItemEx("IllusImageA");
      ILLS B 3 Bright A_Chase;
      ILLS B 0 Bright A_SpawnItemEx("IllusImageB");
      ILLS B 3 Bright A_Chase;
      ILLS B 0 Bright A_SpawnItemEx("IllusImageB");
      ILLS C 3 Bright A_Chase;
      ILLS C 0 Bright A_SpawnItemEx("IllusImageC");
      ILLS C 3 Bright A_Chase;
      ILLS C 0 Bright A_SpawnItemEx("IllusImageC");
      ILLS D 3 Bright A_Chase;
      ILLS D 0 Bright A_SpawnItemEx("IllusImageD");
      ILLS D 3 Bright A_Chase;
      ILLS D 0 Bright A_SpawnItemEx("IllusImageD");
      Loop;
    Melee:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      ILLS EFG 5 Bright A_FaceTarget;
      ILLS H 6 Bright A_CustomMeleeAttack(Random(1,8)*8, "Illus/Melee", "", "Companion");
      Goto See;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      ILLS EFG 5 Bright A_FaceTarget;
      ILLS H 6 Bright A_CompanionPainAttack("IllusGhost");
      Goto See;
    Death:
      ILLS I 0 Bright A_Scream;
      ILLS I 0 Bright A_NoBlocking;
      ILLS I 3 Bright A_FadeOut(0.02);
      Goto Death+2;
  }

  void A_CompanionPainAttack(class<Actor> spawntype = "IllusGhost", double addangle = 0, int flags = 0, int limit = -1)
	{
		if (target)
		{
			A_FaceTarget();
			A_CompanionPainShootSkull(spawntype, angle + addangle, flags, limit);
		}
	}

  void A_CompanionPainShootSkull(Class<Actor> spawntype, double angle, int flags = 0, int limit = -1)
	{
		if (DamageType == "Massacre") return;

		if (spawntype == null) spawntype = "IllusGhost";

		if (pos.z + height + 8 > ceilingz)
		{
			if (bFloat)
			{
				Vel.Z -= 2;
				bInFloat = true;
				bVFriction = true;
			}
			return;
		}

		if (limit < 0 && (Level.compatflags & COMPATF_LIMITPAIN))
			limit = 21;

		if (limit > 0)
		{
			int count = limit;
			ThinkerIterator it = ThinkerIterator.Create(spawntype);
			Thinker othink;

			while ( (othink = it.Next ()) )
			{
				if (--count == 0)
					return;
			}
		}

		double otherradius = GetDefaultByType(spawntype).radius;
		double prestep = 4 + (radius + otherradius) * 1.5;

		Vector2 move = AngleToVector(angle, prestep);
		Vector3 spawnpos = pos + (0,0,8);
		Vector3 destpos = spawnpos + move;

		//Actor other = Spawn(spawntype, spawnpos, ALLOW_REPLACE);
    let g = Globals(EventHandler.Find("Globals"));
    Actor other = g.createCompanion("IllusGhost", pos, null, "", true);

		if (other != null)
		{
			double maxmove = other.radius - 1;

			if (maxmove <= 0) maxmove = 16;

			double xspeed = abs(move.X);
			double yspeed = abs(move.Y);

			int steps = 1;

			if (xspeed > yspeed)
			{
				if (xspeed > maxmove)
				{
					steps = int(1 + xspeed / maxmove);
				}
			}
			else
			{
				if (yspeed > maxmove)
				{
					steps = int(1 + yspeed / maxmove);
				}
			}

			Vector2 stepmove = move / steps;
			bool savedsolid = bSolid;
			bool savednoteleport = other.bNoTeleport;

			bSolid = false;
			other.bNoTeleport = true;
			for (int i = 0; i < steps; i++)
			{
				Vector2 ptry = other.pos.xy + stepmove;
				double oldangle = other.angle;
				if (!other.TryMove(ptry, 0))
				{
					other.ClearCounters();
					other.DamageMobj(self, self, TELEFRAG_DAMAGE, "Companion");
					bSolid = savedsolid;
					other.bNoTeleport = savednoteleport;
					return;
				}

				if (other.pos.xy != ptry)
				{
					double anglediff = deltaangle(oldangle, other.angle);

					if (anglediff != 0)
					{
						stepmove = RotateVector(stepmove, anglediff);
					}
				}

			}
			bSolid = savedsolid;
			other.bNoTeleport = savednoteleport;

			other.CopyFriendliness (self, !(flags & PAF_NOTARGET));

			if (!(flags & PAF_NOSKULLATTACK))
			{
				other.A_SkullAttack();
			}
		}
	}

}

Class IllusGhost : Actor
{
  Default
  {
    Radius 20;
    Height 56;
    Mass 250;
    Speed 30;
    Obituary "%o was clawed inside by an illus";
    RenderStyle "Translucent";
    Alpha 0.4;
    MeleeSound "Illus/Melee";
    +NoTeleport
    +FloorClip
    -Solid
    -Shootable
    +NonShootable
    +LookAllAround
    +Dropoff
    +NoClip
  }
  States
  {
    Spawn:
      TNT1 A 0;
    See:
      TNT1 A 0 A_JumpIfInventory("IllusCounter", 20, "Death");
      TNT1 AAAAAAAAAA 0 A_Chase;
      TNT1 A 1 A_GiveInventory("IllusCounter", 1);
      Loop;
    Melee:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      ILLS EFG 2 Bright A_FaceTarget;
      ILLS H 4 Bright A_CustomMeleeAttack(Random(1,8)*8, "Illus/Melee", "", "Companion");
    Death:
      TNT1 A 1;
      Stop;
  }

  override bool Slam(Actor victim)
  {
    bSkullFly = false;
    vel = (0, 0, 0);
    if (health > 0)
    {
      if (!bDormant)
      {
        int dam = GetMissileDamage (7, 1);
        int newdam = victim.DamageMobj (self, self, dam, "Companion");
        victim.TraceBleed (newdam > 0 ? newdam : dam, self);
        if (health > 0)
        {
          if (SeeState != NULL && !bRetargetAfterSlam){
            SetState (SeeState);
          }else{
            SetIdle();
          }
        }
      }
      else
      {
        SetIdle();
        tics = -1;
      }
    }
    return false;
  }
}

Class IllusCounter : Inventory { Default { Inventory.MaxAmount 20; } }

Class IllusImageA : Actor
{
  Default
  {
    Radius 4;
    Height 8;
    Speed 0;
    Damage 0;
    Mass 75;
    RenderStyle "Translucent";
    Alpha 0.3;
    Projectile;
  }
  States
  {
    Spawn:
      ILLS A 10 Bright;
      Stop;
  }
}

Class IllusImageB : Actor
{
  Default
  {
    Radius 4;
    Height 8;
    Speed 0;
    Damage 0;
    Mass 75;
    RenderStyle "Translucent";
    Alpha 0.3;
    Projectile;
  }
  States
  {
    Spawn:
      ILLS B 10 Bright;
      Stop;
  }
}

Class IllusImageC : Actor
{
  Default
  {
    Radius 4;
    Height 8;
    Speed 0;
    Damage 0;
    Mass 75;
    RenderStyle "Translucent";
    Alpha 0.3;
    Projectile;
  }
  States
  {
    Spawn:
      ILLS C 10 Bright;
      Stop;
  }
}

Class IllusImageD : Actor
{
  Default
  {
    Radius 4;
    Height 8;
    Speed 0;
    Damage 0;
    Mass 75;
    RenderStyle "Translucent";
    Alpha 0.3;
    Projectile;
  }
  States
  {
    Spawn:
      ILLS D 10 Bright;
      Stop;
  }
}
