class CompanionArachnotron : Arachnotron{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      BSPI ABCDEF 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      BSPI A 20 bright A_FaceTarget;
      BSPI G 4 bright A_CompanionBspiAttack();
      BSPI H 4 bright;
      BSPI H 1 bright A_SpidRefire;
      goto Missile+1;
  }

  void A_CompanionBspiAttack()
	{
		if (target)
		{
			A_FaceTarget();
      A_SpawnProjectile("CompanionArachnotronPlasma");
		}
	}
}

class CompanionArchvile : Archvile{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      VILE ABCDEF 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    See:
        VILE AABBCCDDEEFF 2 A_Chase;
        Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      VILE G 0 BRIGHT A_VileStart;
      VILE G 10 BRIGHT A_FaceTarget;
      VILE H 8 BRIGHT A_VileTarget;
      VILE IJKLMN 8 BRIGHT A_FaceTarget;
      VILE O 8 BRIGHT A_CompanionVileAttack();
      VILE P 20 BRIGHT;
      Goto See;
  }

  void A_CompanionVileAttack(sound snd = "vile/stop", int initialdmg = 20, int blastdmg = 70, int blastradius = 70, double thrust = 1.0, name damagetype = "Companion", int flags = VAF_DMGTYPEAPPLYTODIRECT)
	{
		Actor targ = target;
		if (targ)
		{
			A_FaceTarget();
			if (!CheckSight(targ, 0)) return;
			A_StartSound(snd, CHAN_WEAPON);
			int newdam = targ.DamageMobj (self, self, initialdmg, (flags & VAF_DMGTYPEAPPLYTODIRECT)? damagetype : 'Companion');

			targ.TraceBleed (newdam > 0 ? newdam : initialdmg, self);

			Actor fire = tracer;
			if (fire)
			{
				fire.SetOrigin(targ.Vec3Angle(-24., angle, 0), true);
				fire.A_Explode(blastdmg, blastradius, XF_NOSPLASH, false, 0, 0, 0, "CompanionBulletPuff", damagetype);
			}
			if (!targ.bDontThrust)
			{
				targ.Vel.z = thrust * 1000 / max(1, targ.Mass);
			}
		}
	}
}

class CompanionBaronOfHell : BaronOfHell{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      BOSS ABCD 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      BOSS EF 8 A_FaceTarget;
      BOSS G 8 A_CompanionBruisAttack();
      Goto See;
  }

  void A_CompanionBruisAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = random[pr_bruisattack](1, 8) * 10;
				A_StartSound ("baron/melee", CHAN_WEAPON);
				int newdam = target.DamageMobj (self, self, damage, "Companion");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
        A_SpawnProjectile("CompanionBaronBall");
			}
		}
	}
}

class CompanionCacodemon : Cacodemon{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      HEAD A 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      HEAD B 5 A_FaceTarget;
      HEAD C 5 A_FaceTarget;
      HEAD D 5 BRIGHT A_CompanionHeadAttack();
      Goto See;
  }
  void A_CompanionHeadAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = random[pr_headattack](1, 6) * 10;
				A_StartSound (AttackSound, CHAN_WEAPON);
				int newdam = target.DamageMobj (self, self, damage, "Companion");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
        A_SpawnProjectile("CompanionCacodemonBall");
			}
		}
	}
}

class CompanionChaingunGuy : ChaingunGuy{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      CPOS ABCD 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      CPOS E 10 A_FaceTarget;
      CPOS FE 4 BRIGHT A_CompanionCPosAttack();
      CPOS F 1 A_CPosRefire;
      Goto Missile+1;
  }

  void A_CompanionCPosAttack()
	{
		if (target)
		{
			if (bStealth) visdir = 1;
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_FaceTarget();
			double slope = AimLineAttack(angle, MISSILERANGE);
			double ang = angle + Random2[CPosAttack]() * (22.5/256);
			int damage = Random[CPosAttack](1, 5) * 3;
			LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "CompanionBulletpuff");
		}
	}
}

class CompanionCyberdemon : Cyberdemon{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      CYBR ABCD 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      CYBR E 6 A_FaceTarget;
      CYBR F 12 A_CompanionCyberAttack();
      CYBR E 12 A_FaceTarget;
      CYBR F 12 A_CompanionCyberAttack();
      CYBR E 12 A_FaceTarget;
      CYBR F 12 A_CompanionCyberAttack();
      Goto See;
  }

  void A_CompanionCyberAttack()
	{
		if (target)
		{
			A_FaceTarget();
      A_SpawnProjectile("CompanionRocket");
		}
	}
}

class CompanionDemon : Demon{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      SARG ABCD 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Melee:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      SARG EF 8 Fast A_FaceTarget;
      SARG G 8 Fast A_CompanionSargAttack();
      Goto See;
  }
  void A_CompanionSargAttack()
  {
    let targ = target;
    if (targ && CheckMeleeRange())
    {
      int damage = random[pr_sargattack](1, 10) * 4;
      int newdam = targ.DamageMobj (self, self, damage, "Companion");
      targ.TraceBleed (newdam > 0 ? newdam : damage, self);
    }
  }
}

class CompanionDoomImp : DoomImp{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      TROO ABCD 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      TROO EF 8 A_FaceTarget;
      TROO G 6 A_CompanionTroopAttack();
      Goto See;
  }
  void A_CompanionTroopAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = random[pr_troopattack](1, 8) * 3;
				A_StartSound ("imp/melee", CHAN_WEAPON);
				int newdam = targ.DamageMobj (self, self, damage, "Companion");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
        A_SpawnProjectile("CompanionDoomImpBall");
			}
		}
	}
}

class CompanionFatso : Fatso{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      FATT ABCDEF 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      FATT G 20 A_FatRaise;
      FATT H 10 BRIGHT A_CompanionFatAttack1();
      FATT IG 5 A_FaceTarget;
      FATT H 10 BRIGHT A_CompanionFatAttack2();
      FATT IG 5 A_FaceTarget;
      FATT H 10 BRIGHT A_CompanionFatAttack3();
      FATT IG 5 A_FaceTarget;
      Goto See;
  }

  void A_CompanionFatAttack1(class<Actor> spawntype = "CompanionFatShot")
	{
		if (target)
		{
			A_FaceTarget ();
			Angle += FATSPREAD;
      A_SpawnProjectile(spawntype);
			Actor missile = A_SpawnProjectile(spawntype);
			if (missile)
			{
				missile.Angle += FATSPREAD;
				missile.VelFromAngle();
			}
		}
	}

	void A_CompanionFatAttack2(class<Actor> spawntype = "CompanionFatShot")
	{
		if (target)
		{
			A_FaceTarget ();
			Angle -= FATSPREAD;
      A_SpawnProjectile(spawntype);
      Actor missile = A_SpawnProjectile(spawntype);
			if (missile)
			{
				missile.Angle -= FATSPREAD;
				missile.VelFromAngle();
			}
		}
	}

	void A_CompanionFatAttack3(class<Actor> spawntype = "CompanionFatShot")
	{
		if (target)
		{
			A_FaceTarget ();
			Actor missile = A_SpawnProjectile(spawntype);
			if (missile)
			{
				missile.Angle -= FATSPREAD/2;
				missile.VelFromAngle();
			}
			missile = A_SpawnProjectile(spawntype);
			if (missile)
			{
				missile.Angle += FATSPREAD/2;
				missile.VelFromAngle();
			}
		}
	}
}

class CompanionHellKnight : HellKnight{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      BOS2 ABCD 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      BOS2 EF 8 A_FaceTarget;
      BOS2 G 8 A_CompanionBruisAttack();
      Goto See;
  }
  void A_CompanionBruisAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = random[pr_bruisattack](1, 8) * 10;
				A_StartSound ("baron/melee", CHAN_WEAPON);
				int newdam = target.DamageMobj (self, self, damage, "Companion");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				A_SpawnProjectile ("CompanionBaronBall");
			}
		}
	}
}

class CompanionLostSoul : LostSoul{

  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      SKUL AB 2 BRIGHT
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      SKUL C 10 BRIGHT A_FaceTarget;
      SKUL D 4 BRIGHT A_SkullAttack;
      SKUL CD 4 BRIGHT;
      Goto Missile+2;
  }

  override bool Slam(Actor victim)
  {
    bSkullFly = false;
    vel = (0, 0, 0);
    if (health > 0)
    {
      if (!bDormant)
      {
        int dam = GetMissileDamage (7, 1);
        int newdam = victim.DamageMobj (self, self, dam, "Companion");
        victim.TraceBleed (newdam > 0 ? newdam : dam, self);
        if (health > 0)
        {
          if (SeeState != NULL && !bRetargetAfterSlam){
            SetState (SeeState);
          }else{
            SetIdle();
          }
        }
      }
      else
      {
        SetIdle();
        tics = -1;
      }
    }
    return false;
  }
}

class CompanionPainElemental : PainElemental{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      PAIN ABC 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      PAIN D 5 A_FaceTarget;
      PAIN E 5 A_FaceTarget;
      PAIN F 5 BRIGHT A_FaceTarget;
      PAIN F 0 BRIGHT A_CompanionPainAttack();
      Goto See;
    Death:
      PAIN H 8 BRIGHT;
      PAIN I 8 BRIGHT A_Scream;
      PAIN JK 8 BRIGHT;
      PAIN L 8 BRIGHT A_CompanionPainDie;
      PAIN M 8 BRIGHT;
      Stop;
  }

  void A_CompanionPainShootSkull(Class<Actor> spawntype, double angle, int flags = 0, int limit = -1)
	{
		if (DamageType == "Massacre") return;

		if (spawntype == null) spawntype = "CompanionLostSoul";

		if (pos.z + height + 8 > ceilingz)
		{
			if (bFloat)
			{
				Vel.Z -= 2;
				bInFloat = true;
				bVFriction = true;
			}
			return;
		}

		if (limit < 0 && (Level.compatflags & COMPATF_LIMITPAIN))
			limit = 21;

		if (limit > 0)
		{
			int count = limit;
			ThinkerIterator it = ThinkerIterator.Create(spawntype);
			Thinker othink;

			while ( (othink = it.Next ()) )
			{
				if (--count == 0)
					return;
			}
		}

		double otherradius = GetDefaultByType(spawntype).radius;
		double prestep = 4 + (radius + otherradius) * 1.5;

		Vector2 move = AngleToVector(angle, prestep);
		Vector3 spawnpos = pos + (0,0,8);
		Vector3 destpos = spawnpos + move;

		Actor other = Spawn(spawntype, spawnpos, ALLOW_REPLACE);

		if (other != null)
		{
			double maxmove = other.radius - 1;

			if (maxmove <= 0) maxmove = 16;

			double xspeed = abs(move.X);
			double yspeed = abs(move.Y);

			int steps = 1;

			if (xspeed > yspeed)
			{
				if (xspeed > maxmove)
				{
					steps = int(1 + xspeed / maxmove);
				}
			}
			else
			{
				if (yspeed > maxmove)
				{
					steps = int(1 + yspeed / maxmove);
				}
			}

			Vector2 stepmove = move / steps;
			bool savedsolid = bSolid;
			bool savednoteleport = other.bNoTeleport;

			bSolid = false;
			other.bNoTeleport = true;
			for (int i = 0; i < steps; i++)
			{
				Vector2 ptry = other.pos.xy + stepmove;
				double oldangle = other.angle;
				if (!other.TryMove(ptry, 0))
				{
					other.ClearCounters();
					other.DamageMobj(self, self, TELEFRAG_DAMAGE, "Companion");
					bSolid = savedsolid;
					other.bNoTeleport = savednoteleport;
					return;
				}

				if (other.pos.xy != ptry)
				{
					double anglediff = deltaangle(oldangle, other.angle);

					if (anglediff != 0)
					{
						stepmove = RotateVector(stepmove, anglediff);
					}
				}

			}
			bSolid = savedsolid;
			other.bNoTeleport = savednoteleport;

			other.CopyFriendliness (self, !(flags & PAF_NOTARGET));

			if (!(flags & PAF_NOSKULLATTACK))
			{
				other.A_SkullAttack();
			}
		}
	}


	void A_CompanionPainAttack(class<Actor> spawntype = "CompanionLostSoul", double addangle = 0, int flags = 0, int limit = -1)
	{
		if (target)
		{
			A_FaceTarget();
			A_CompanionPainShootSkull(spawntype, angle + addangle, flags, limit);
		}
	}

	void A_CompanionPainDie(class<Actor> spawntype = "CompanionLostSoul")
	{
		if (target && IsFriend(target))
		{
			bFriendly = false;
		}
		A_NoBlocking();
		A_CompanionPainShootSkull(spawntype, angle + 90);
		A_CompanionPainShootSkull(spawntype, angle + 180);
		A_CompanionPainShootSkull(spawntype, angle + 270);
	}
}

class CompanionRevenant : Revenant{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      SKEL ABCDEF 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Melee:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      SKEL G 0 A_FaceTarget;
      SKEL G 6 A_SkelWhoosh;
      SKEL H 6 A_FaceTarget;
      SKEL I 6 A_CompanionSkelFist();
      Goto See;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      SKEL J 0 BRIGHT A_FaceTarget;
      SKEL J 10 BRIGHT A_FaceTarget;
      SKEL K 10 A_CompanionSkelMissile();
      SKEL K 10 A_FaceTarget;
      Goto See;
  }

  void A_CompanionSkelMissile()
	{
		if (target == null) return;
		A_FaceTarget();
		AddZ(16);
		Actor missile = A_SpawnProjectile("CompanionRevenantTracer");
		AddZ(-16);
		if (missile != null)
		{
			missile.SetOrigin(missile.Vec3Offset(missile.Vel.X, missile.Vel.Y, 0.), false);
			missile.tracer = target;
		}
	}

	void A_CompanionSkelFist()
	{
		let targ = target;
		if (targ == null) return;
		A_FaceTarget();

		if (CheckMeleeRange ())
		{
			int damage = random[SkelFist](1, 10) * 6;
			A_StartSound("skeleton/melee", CHAN_WEAPON);
			int newdam = targ.DamageMobj (self, self, damage, "Companion");
			targ.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
	}


}

class CompanionShotgunGuy : ShotgunGuy{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      SPOS ABCD 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      SPOS E 10 A_FaceTarget;
      SPOS F 10 BRIGHT A_CompanionSposAttackUseAtkSound();
      SPOS E 10;
      Goto See;
  }

  void A_CompanionSPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_CompanionSPosAttackInternal();
		}
	}
  private void A_CompanionSPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double slope = AimLineAttack(bangle, MISSILERANGE);

			for (int i=0 ; i<3 ; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (22.5/256);
				int damage = Random[SPosAttack](1, 5) * 3;
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "CompanionBulletpuff");
			}
		}
  }
}

class CompanionSpectre : Spectre{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      SARG ABCD 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Melee:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      SARG EF 8 Fast A_FaceTarget;
      SARG G 8 Fast A_CompanionSargAttack();
      Goto See;
  }
  void A_CompanionSargAttack()
  {
    let targ = target;
    if (targ && CheckMeleeRange())
    {
      int damage = random[pr_sargattack](1, 10) * 4;
      int newdam = targ.DamageMobj (self, self, damage, "Companion");
      targ.TraceBleed (newdam > 0 ? newdam : damage, self);
    }
  }
}

class CompanionSpiderMastermind : SpiderMastermind{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      SPID ABCDEF 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      SPID A 20 BRIGHT A_FaceTarget;
      SPID G 4 BRIGHT A_CompanionSPosAttackUseAtkSound();
      SPID H 4 BRIGHT A_CompanionSposAttackUseAtkSound();
      SPID H 1 BRIGHT A_SpidRefire;
      Goto Missile+1;
  }

  void A_CompanionSPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_CompanionSPosAttackInternal();
		}
	}
  private void A_CompanionSPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double slope = AimLineAttack(bangle, MISSILERANGE);

			for (int i=0 ; i<3 ; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (22.5/256);
				int damage = Random[SPosAttack](1, 5) * 3;
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "CompanionBulletpuff");
			}
		}
  }
}

class CompanionWolfensteinSS : WolfensteinSS{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      SSWV ABCD 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      SSWV E 10 A_FaceTarget;
      SSWV F 10 A_FaceTarget;
      SSWV G 4 BRIGHT A_CompanionCPosAttack();
      SSWV F 6 A_FaceTarget;
      SSWV G 4 BRIGHT A_CompanionCPosAttack();
      SSWV F 1 A_CPosRefire;
      Goto Missile+1;
  }

  void A_CompanionCPosAttack()
	{
		if (target)
		{
			if (bStealth) visdir = 1;
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_FaceTarget();
			double slope = AimLineAttack(angle, MISSILERANGE);
			double ang = angle + Random2[CPosAttack]() * (22.5/256);
			int damage = Random[CPosAttack](1, 5) * 3;
			LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "CompanionBulletpuff");
		}
	}
}

class CompanionZombieMan : ZombieMan{
  Default
  {
    -CountKill
  }
  States
  {
    Spawn:
      POSS ABCD 2
      {
        A_Wander(CHF_NORANDOMTURN);
        A_Look();
      }
      Loop;
    Missile:
      TNT1 A 0 A_AlertMonsters(0, AMF_TARGETEMITTER);
      POSS E 10 A_FaceTarget;
      POSS F 10 BRIGHT A_CompanionSposAttackUseAtkSound();
      POSS E 10;
      Goto See;
  }

  void A_CompanionSPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_CompanionSPosAttackInternal();
		}
	}
  private void A_CompanionSPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double slope = AimLineAttack(bangle, MISSILERANGE);

			for (int i=0 ; i<3 ; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (22.5/256);
				int damage = Random[SPosAttack](1, 5) * 3;
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "CompanionBulletpuff");
			}
		}
  }
}